{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQe4KldcjXQrVy6cxqi7aL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"18gF5gISHw6b","executionInfo":{"status":"ok","timestamp":1700205468736,"user_tz":-540,"elapsed":7798,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}},"outputId":"c68879b4-13a4-4ff6-e266-60b179825e22"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting konlpy\n","  Downloading konlpy-0.6.0-py2.py3-none-any.whl (19.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.4/19.4 MB\u001b[0m \u001b[31m73.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting JPype1>=0.7.0 (from konlpy)\n","  Downloading JPype1-1.4.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (465 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m465.3/465.3 kB\u001b[0m \u001b[31m34.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.3)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.23.5)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (23.2)\n","Installing collected packages: JPype1, konlpy\n","Successfully installed JPype1-1.4.1 konlpy-0.6.0\n"]}],"source":["pip install konlpy #명령 프롬프트에서 실행할 것"]},{"cell_type":"code","source":["%cd 'Mecab-ko-for-Google-Colab'\n","!bash install_mecab-ko_on_colab_light_220429.sh #맥캡설치 복잡해서 그냥 pip로는 설치 안되고 쉘 스크립트 형태로 받아주는것"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4b29J02VH8Tf","executionInfo":{"status":"ok","timestamp":1700205470732,"user_tz":-540,"elapsed":12,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}},"outputId":"77d8c961-d929-4ae8-9bc4-b2f90d57e66d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[Errno 2] No such file or directory: 'Mecab-ko-for-Google-Colab'\n","/content\n","bash: install_mecab-ko_on_colab_light_220429.sh: No such file or directory\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from konlpy.tag import Mecab #문장을 토큰화\n","from gensim.test.utils import common_texts\n","from gensim.models.doc2vec import Doc2Vec, TaggedDocument\n","from collections import Counter"],"metadata":{"id":"eATlKn2bH-X9","executionInfo":{"status":"ok","timestamp":1700205476046,"user_tz":-540,"elapsed":3094,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vTzsZLYuIALe","executionInfo":{"status":"ok","timestamp":1700205261974,"user_tz":-540,"elapsed":16840,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}},"outputId":"388b202b-cd35-42b3-dd74-0fd5ff4b3793"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# 파일 경로 설정\n","file_path = '/content/drive/MyDrive/Colab Notebooks/ingreDictionary_dataset/통합 식품영양성분DB_농축산물_20231116.xlsx'\n","output_file_path = '/content/drive/MyDrive/Colab Notebooks/potato_bf_Delete.txt'\n","\n","# Excel 파일을 데이터프레임으로 읽기\n","df = pd.read_excel(file_path)"],"metadata":{"id":"Zfi_ZPTzIBpX","executionInfo":{"status":"ok","timestamp":1700205503380,"user_tz":-540,"elapsed":16521,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["print(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FYyBA6xeJc4e","executionInfo":{"status":"ok","timestamp":1700205583933,"user_tz":-540,"elapsed":9,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}},"outputId":"e41c8c4f-2e66-4525-dc6c-584c87dccf61"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['NO', 'SAMPLE_ID', '식품코드', 'DB군', '상용제품', '식품명', '연도', '지역 / 제조사',\n","       '식품대분류', '식품상세분류',\n","       ...\n","       '트랜스 지방산(g)', '트랜스 올레산(18:1(n-9)t)(㎎)', '트랜스 리놀레산(18:2t)(㎎)',\n","       '트랜스 리놀렌산(18:3t)(㎎)', '식염상당량(g)', '회분(g)', '폐기율(%)', '성분표출처', '발행기관',\n","       'tocken'],\n","      dtype='object', length=146)\n"]}]},{"cell_type":"code","source":["# '식품명' 열의 데이터를 (콤마+띄어쓰기)를 기준으로 토큰화하여 '토큰' 열 추가\n","df['tocken'] = df['식품명'].str.split(', ')\n","\n","# 중복을 제거하고 유니크한 토큰들을 얻기 위해 set을 사용\n","unique_tokens = set(token for tokens_list in df['tocken'] for token in tokens_list)\n","\n","# 중복을 방지한 토큰들을 파일에 저장\n","with open(output_file_path, 'w', encoding='utf-8') as file:\n","    for token in unique_tokens:\n","        file.write(token + '\\n')\n","\n","# 결과 출력\n","print(f\"중복을 방지한 토큰들을 {output_file_path}에 저장했습니다.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"92SM1W0kIDO2","executionInfo":{"status":"ok","timestamp":1700205618693,"user_tz":-540,"elapsed":430,"user":{"displayName":"곽시헌","userId":"08857774292332952664"}},"outputId":"c09edcf5-90c5-4ccb-d2c9-35a1caa5a5d3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["중복을 방지한 토큰들을 /content/drive/MyDrive/Colab Notebooks/potato_bf_Delete.txt에 저장했습니다.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"W3tXKY2YIF4O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 파일 경로 설정\n","input_file_path = '/content/drive/MyDrive/Colab Notebooks/potato_aft_Delete.txt'\n","output_file_path = '/content/drive/MyDrive/Colab Notebooks/potatoDictionary.txt'\n","\n","# 파일 읽기\n","with open(input_file_path, 'r', encoding='utf-8') as file:\n","    lines = file.readlines()\n","\n","# 토큰화 및 중복 제거\n","unique_tokens = set()\n","for line in lines:\n","    tokens = line.strip().split()  # 엔터를 기준으로 토큰 분리\n","    unique_tokens.update(tokens)\n","\n","# 중복 제거한 토큰을 새로운 파일에 저장\n","with open(output_file_path, 'w', encoding='utf-8') as file:\n","    file.write('\\n'.join(unique_tokens))"],"metadata":{"id":"L856vSYnIMlk"},"execution_count":null,"outputs":[]}]}